View(data)
library(dplyr)
library(tidyr)
library(leaflet)
library(sf)
library(readr)
# Read the shapefile data for French departments
france <- st_read("/Users/titouanlegourrierec/Desktop/untitled folder/departements-20140306-100m.shp", quiet=T)
# Remove unnecessary columns from the 'france' dataframe
france <- france[, !names(france) %in% c("nom", "nuts3", "wikipedia")]
# Read the population data for French departments
pop <- read_csv("/Users/titouanlegourrierec/Desktop/untitled folder/Departements.csv")
# Remove the first column from the 'pop' dataframe
pop <- pop[, -1]
# Perform an inner join between 'france' and 'pop' dataframes based on the 'code_insee' column
data <- inner_join(france, pop, by = "code_insee")
object = data$pop
# Create a Leaflet map with filtered French departments data
leaflet(data) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(color = "#444444" , weight = 1,
opacity = 0.8, fillOpacity = 0.75,
fillColor = ~colorNumeric('Viridis', object)(object))
library(dplyr)
library(tidyr)
library(leaflet)
library(sf)
library(readr)
library(viridis)
# Read the shapefile data for French departments
france <- st_read("/Users/titouanlegourrierec/Desktop/untitled folder/departements-20140306-100m.shp", quiet=T)
# Remove unnecessary columns from the 'france' dataframe
france <- france[, !names(france) %in% c("nom", "nuts3", "wikipedia")]
# Read the population data for French departments
pop <- read_csv("/Users/titouanlegourrierec/Desktop/untitled folder/Departements.csv")
# Remove the first column from the 'pop' dataframe
pop <- pop[, -1]
# Perform an inner join between 'france' and 'pop' dataframes based on the 'code_insee' column
data <- inner_join(france, pop, by = "code_insee")
object = data$pop
# Créer un objet de couleurs basé sur les données dans "data"
color_palette <- viridis::viridis(10) # Vous pouvez choisir un autre jeu de couleurs si vous le souhaitez
# Créer un objet colorNumeric pour mapper les valeurs aux couleurs
color_mapping <- colorNumeric(palette = color_palette, domain = object)
# Créer la carte Leaflet
leaflet(data) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(color = "#444444" , weight = 1,
opacity = 0.8, fillOpacity = 0.75,
fillColor = ~color_mapping(object))
evolution <- read_csv("./Licences_evolution.csv")
# Chargement des bibliothèques
library(flexdashboard)
#library(shiny)
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
library(reshape2)
library(rAmCharts)
library(rpart)
library(sf)
library(readr)
library(stringr)
library(leaflet)
library(RColorBrewer)
library(DT)
evolution <- read_csv("./Licences_evolution.csv")
View(evolution)
evolution <- read_csv("./Licences_evolution.csv", sep=';')
evolution <- read_csv2("./Licences_evolution.csv", sep=';')
evolution <- read_csv2("./Licences_evolution.csv")
View(evolution)
evolution <- read_csv2("./Licences_evolution.csv")
View(evolution)
evolution <- read_csv2("./Licences_evolution.csv")
View(evolution)
summary(evolution)
evolution <- mutate_all(evolution, as.integer)
View(evolution)
View(evolution)
evolution <- read_csv2("./Licences_evolution.csv")
View(evolution)
eolution
evolution
colnames(evolution)
data
# Créer un dataframe avec les données fournies
datatest <- data.frame(
Sport = c("Football", "Basketball", "Handball", "Rugby", "Tennis", "Judo", "Golf", "Natation"),
`2016` = c(2106972, 535687, 519716, 328344, 1039352, 559111, 407719, 316896),
`2017` = c(2131165, 538295, 549295, 313237, 1019816, 563580, 410261, 314299),
`2018` = c(2108811, 525040, 527841, 334853, 985551, 546954, 412726, 308863),
`2019` = c(2198835, 516387, 492101, 325636, 978895, 524425, 418741, 363809),
`2020` = c(2109844, 520235, 464955, 319604, 972007, 512036, 402991, 378032),
`2021` = c(1902036, 423482, 340974, 317866, 947288, 368661, 436846, 286397),
`2022` = c(2130095, 527913, 454086, 351828, 1044574, 469076, 441961, 379916)
)
datatest
# Créer un dataframe avec les données fournies
datatest <- data.frame(
Sport = c("Football", "Basketball", "Handball", "Rugby", "Tennis", "Judo", "Golf", "Natation"),
'2016' = c(2106972, 535687, 519716, 328344, 1039352, 559111, 407719, 316896),
`2017` = c(2131165, 538295, 549295, 313237, 1019816, 563580, 410261, 314299),
`2018` = c(2108811, 525040, 527841, 334853, 985551, 546954, 412726, 308863),
`2019` = c(2198835, 516387, 492101, 325636, 978895, 524425, 418741, 363809),
`2020` = c(2109844, 520235, 464955, 319604, 972007, 512036, 402991, 378032),
`2021` = c(1902036, 423482, 340974, 317866, 947288, 368661, 436846, 286397),
`2022` = c(2130095, 527913, 454086, 351828, 1044574, 469076, 441961, 379916)
)
datatest
as.numeric('X2016')
# Créer un dataframe avec les données fournies
data <- data.frame(
Sport = c("Football", "Basketball", "Handball", "Rugby", "Tennis", "Judo", "Golf", "Natation"),
`2016` = c(2106972, 535687, 519716, 328344, 1039352, 559111, 407719, 316896),
`2017` = c(2131165, 538295, 549295, 313237, 1019816, 563580, 410261, 314299),
`2018` = c(2108811, 525040, 527841, 334853, 985551, 546954, 412726, 308863),
`2019` = c(2198835, 516387, 492101, 325636, 978895, 524425, 418741, 363809),
`2020` = c(2109844, 520235, 464955, 319604, 972007, 512036, 402991, 378032),
`2021` = c(1902036, 423482, 340974, 317866, 947288, 368661, 436846, 286397),
`2022` = c(2130095, 527913, 454086, 351828, 1044574, 469076, 441961, 379916)
)
# Extraire les données pour le sport "Football"
sport_data <- data[data$Sport == "Football", -1]
rownames(sport_data) <- data[data$Sport == "Football", 1]
# Retirer le "X" des années
years <- gsub("X", "", colnames(football_data))
# Créer un dataframe avec les données fournies
data <- data.frame(
Sport = c("Football", "Basketball", "Handball", "Rugby", "Tennis", "Judo", "Golf", "Natation"),
`2016` = c(2106972, 535687, 519716, 328344, 1039352, 559111, 407719, 316896),
`2017` = c(2131165, 538295, 549295, 313237, 1019816, 563580, 410261, 314299),
`2018` = c(2108811, 525040, 527841, 334853, 985551, 546954, 412726, 308863),
`2019` = c(2198835, 516387, 492101, 325636, 978895, 524425, 418741, 363809),
`2020` = c(2109844, 520235, 464955, 319604, 972007, 512036, 402991, 378032),
`2021` = c(1902036, 423482, 340974, 317866, 947288, 368661, 436846, 286397),
`2022` = c(2130095, 527913, 454086, 351828, 1044574, 469076, 441961, 379916)
)
# Extraire les données pour le sport "Football"
sport_data <- data[data$Sport == "Football", -1]
rownames(sport_data) <- data[data$Sport == "Football", 1]
# Retirer le "X" des années
years <- gsub("X", "", colnames(sport_data))
# Créer un graphique avec Plotly avec des lignes et des points plus gros
plot_ly(sport_data, x = years, y = as.numeric(sport_data), type = 'scatter', mode = 'lines+markers', name = 'Football',
line = list(width = 5, color='#444444'), # Largeur de la ligne
marker = list(size = 12, color='#444444')) %>% # Taille des points
layout(title = 'Évolution des licences de Football (2016-2022)',
xaxis = list(title = 'Année'),
yaxis = list(title = 'Licences de Football', rangemode = "tozero"))
# Créer un dataframe avec les données fournies
data <- data.frame(
Sport = c("Football", "Basketball", "Handball", "Rugby", "Tennis", "Judo", "Golf", "Natation"),
`2016` = c(2106972, 535687, 519716, 328344, 1039352, 559111, 407719, 316896),
`2017` = c(2131165, 538295, 549295, 313237, 1019816, 563580, 410261, 314299),
`2018` = c(2108811, 525040, 527841, 334853, 985551, 546954, 412726, 308863),
`2019` = c(2198835, 516387, 492101, 325636, 978895, 524425, 418741, 363809),
`2020` = c(2109844, 520235, 464955, 319604, 972007, 512036, 402991, 378032),
`2021` = c(1902036, 423482, 340974, 317866, 947288, 368661, 436846, 286397),
`2022` = c(2130095, 527913, 454086, 351828, 1044574, 469076, 441961, 379916)
)
# Extraire les données pour le sport "Football"
sport_data <- data[data$Sport == "Football", -1]
rownames(sport_data) <- data[data$Sport == "Football", 1]
# Retirer le "X" des années
years <- gsub("X", "", colnames(sport_data))
# Créer un graphique avec Plotly avec des lignes et des points plus gros
plot_ly(sport_data, x = years, y = as.numeric(sport_data), type = 'scatter', mode = 'lines+markers', name = 'Football',
line = list(width = 5, color='#444444'), # Largeur de la ligne
marker = list(size = 12, color='#444444'),
text = paste("<span style='font-family: Helvetica; font-size:15px; '><b>Sport :</b>",
"<br><b>Population :</b>", format(int(123234), big.mark = " "),
hoverinfo = 'text')
) %>% # Taille des points
layout(title = 'Évolution des licences de Football (2016-2022)',
xaxis = list(title = 'Année'),
yaxis = list(title = 'Licences de Football', rangemode = "tozero"))
# Créer un dataframe avec les données fournies
data <- data.frame(
Sport = c("Football", "Basketball", "Handball", "Rugby", "Tennis", "Judo", "Golf", "Natation"),
`2016` = c(2106972, 535687, 519716, 328344, 1039352, 559111, 407719, 316896),
`2017` = c(2131165, 538295, 549295, 313237, 1019816, 563580, 410261, 314299),
`2018` = c(2108811, 525040, 527841, 334853, 985551, 546954, 412726, 308863),
`2019` = c(2198835, 516387, 492101, 325636, 978895, 524425, 418741, 363809),
`2020` = c(2109844, 520235, 464955, 319604, 972007, 512036, 402991, 378032),
`2021` = c(1902036, 423482, 340974, 317866, 947288, 368661, 436846, 286397),
`2022` = c(2130095, 527913, 454086, 351828, 1044574, 469076, 441961, 379916)
)
# Extraire les données pour le sport "Football"
sport_data <- data[data$Sport == "Football", -1]
rownames(sport_data) <- data[data$Sport == "Football", 1]
# Retirer le "X" des années
years <- gsub("X", "", colnames(sport_data))
# Créer un graphique avec Plotly avec des lignes et des points plus gros
plot_ly(sport_data, x = years, y = as.numeric(sport_data), type = 'scatter', mode = 'lines+markers', name = 'Football',
line = list(width = 5, color='#444444'), # Largeur de la ligne
marker = list(size = 12, color='#444444'),
text = paste("<span style='font-family: Helvetica; font-size:15px; '><b>Sport :</b>",
"<br><b>Population :</b>",
hoverinfo = 'text')
) %>% # Taille des points
layout(title = 'Évolution des licences de Football (2016-2022)',
xaxis = list(title = 'Année'),
yaxis = list(title = 'Licences de Football', rangemode = "tozero"))
# Créer un dataframe avec les données fournies
data <- data.frame(
Sport = c("Football", "Basketball", "Handball", "Rugby", "Tennis", "Judo", "Golf", "Natation"),
`2016` = c(2106972, 535687, 519716, 328344, 1039352, 559111, 407719, 316896),
`2017` = c(2131165, 538295, 549295, 313237, 1019816, 563580, 410261, 314299),
`2018` = c(2108811, 525040, 527841, 334853, 985551, 546954, 412726, 308863),
`2019` = c(2198835, 516387, 492101, 325636, 978895, 524425, 418741, 363809),
`2020` = c(2109844, 520235, 464955, 319604, 972007, 512036, 402991, 378032),
`2021` = c(1902036, 423482, 340974, 317866, 947288, 368661, 436846, 286397),
`2022` = c(2130095, 527913, 454086, 351828, 1044574, 469076, 441961, 379916)
)
# Extraire les données pour le sport "Football"
sport_data <- data[data$Sport == "Football", -1]
rownames(sport_data) <- data[data$Sport == "Football", 1]
# Retirer le "X" des années
years <- gsub("X", "", colnames(sport_data))
# Créer un graphique avec Plotly avec des lignes et des points plus gros
plot_ly(sport_data, x = years, y = as.numeric(sport_data), type = 'scatter', mode = 'lines+markers', name = 'Football',
line = list(width = 5, color='#444444'), # Largeur de la ligne
marker = list(size = 12, color='#444444'),
text = paste("<span style='font-family: Helvetica; font-size:15px; '><b>Sport :</b> Football",
"<br><b>Année :</b> ", years,
"<br><b>Licences :</b> ", format(as.numeric(sport_data), big.mark = " ", scientific = FALSE),
"</span>"),
hoverinfo = 'text'
)
) %>% # Taille des points
rsconnect::setAccountInfo(name='titouanlegourrierec', token='7319AF2A3409D2CA5422D00C6C109B28', secret='ZiP5VjMrdnrD2SKFIi8GcXRXG/Zl9XlwwbjnNKgD')
setwd("/Users/titouanlegourrierec/Desktop/Shiny_Projet_Visu")
rsconnect::deployApp()
library(sf)
library(readr)
library(dplyr)
library(stringr)
library(leaflet)
library(RColorBrewer)
library(plotly)
#brewer.pal(9, "YlOrBr")
#providers$NASAGIBS.ViirsEarthAtNight2012
################################################################################################################
# Read the shapefile data for French departments
france <- st_read("/Users/titouanlegourrierec/Desktop/visualisation/departements-20140306-100m.shp")
# Remove unnecessary columns from the 'france' dataframe
france <- france[, !names(france) %in% c("nom", "nuts3", "wikipedia")]
# Read the population data for French departments
pop <- read_csv("/Users/titouanlegourrierec/Desktop/visualisation/Departements.csv")
# Remove the first column from the 'pop' dataframe
pop <- pop[, -1]
# Perform an inner join between 'france' and 'pop' dataframes based on the 'code_insee' column
carte_filtree <- inner_join(france, pop, by = "code_insee")
# Calculate the areas of the departments and convert them to square kilometers
carte_filtree <- carte_filtree %>% mutate(aires = st_area(.))
carte_filtree <- carte_filtree %>% mutate(aires = as.numeric(str_extract(aires, "\\d+")) / 1E6)
carte_filtree["Densité"] <- carte_filtree["pop"]/carte_filtree["aires"]
sport_equipment <- read_csv("/Users/titouanlegourrierec/Desktop/visualisation/Sport_Equipment.csv")
sport_equipment <- sport_equipment[, !names(sport_equipment) %in% c("...1")]
sport_equipment <- sport_equipment %>% rename(code_insee = dept)
licences <-  read_csv("/Users/titouanlegourrierec/Desktop/Projet-Visualisation/Licences/AllPages.csv")
licences <- licences[, -1]
carte_sport <- inner_join(carte_filtree, sport_equipment, by = "code_insee")
carte_sport <- inner_join(carte_sport, licences, by = "code_insee")
#export <- st_drop_geometry(carte_sport)
# Création du graphique en secteurs (camembert) interactif
total_infra <- carte_sport$Football + carte_sport$Tennis + carte_sport$Basket + carte_sport$Handball + carte_sport$Natation + carte_sport$Rugby + carte_sport$Golf
sport_names <- c("Football", "Tennis", "Basket", "Handball", "Natation", "Rugby", "Golf")
sport_counts <- sapply(sport_names, function(sport) sum(carte_sport[[sport]]))
plot_ly(labels = sport_names, values = sport_counts, type = 'pie', textinfo = 'label+percent', title = "Répartition des infrastructures sportives par sport")
View(carte_sport)
# Création du graphique en secteurs (camembert) interactif
total_infra <- carte_sport$Licences_Football + carte_sport$Licences_Tennis + carte_sport$Licences_Basket + carte_sport$Licences_Handball + carte_sport$Licences_Natation + carte_sport$Licences_Rugby + carte_sport$Licences_Golf
sport_names <- c("Licences_Football", "Licences_Tennis", "Licences_Basket", "Licences_Handball", "Licences_Natation", "Licences_Rugby", "Licences_Golf")
sport_counts <- sapply(sport_names, function(sport) sum(carte_sport[[sport]]))
plot_ly(labels = sport_names, values = sport_counts, type = 'pie', textinfo = 'label+percent', title = "Répartition des infrastructures sportives par sport")
# Création du graphique en secteurs (camembert) interactif
total_infra <- carte_sport$Football + carte_sport$Tennis + carte_sport$Basket + carte_sport$Handball + carte_sport$Natation + carte_sport$Rugby + carte_sport$Golf
sport_names <- c("Football", "Tennis", "Basket", "Handball", "Natation", "Rugby", "Golf")
sport_counts <- sapply(sport_names, function(sport) sum(carte_sport[[sport]]))
plot_ly(labels = sport_names, values = sport_counts, type = 'pie', textinfo = 'label+percent', title = "Répartition des infrastructures sportives par sport")
# Création du graphique en secteurs (camembert) interactif
total_infra <- carte_sport$Licences_Football + carte_sport$Licences_Tennis + carte_sport$Licences_Basketball + carte_sport$Licences_Handball + carte_sport$Licences_Natation + carte_sport$Licences_Rugby + carte_sport$Licences_Golf
sport_names <- c("Licences_Football", "Licences_Tennis", "Licences_Basket", "Licences_Handball", "Licences_Natation", "Licences_Rugby", "Licences_Golf")
sport_counts <- sapply(sport_names, function(sport) sum(carte_sport[[sport]]))
plot_ly(labels = sport_names, values = sport_counts, type = 'pie', textinfo = 'label+percent', title = "Répartition des infrastructures sportives par sport")
# Création du graphique en secteurs (camembert) interactif
total_infra <- carte_sport$Licences_Football + carte_sport$Licences_Tennis + carte_sport$Licences_Basketball + carte_sport$Licences_Handball + carte_sport$Licences_Natation + carte_sport$Licences_Rugby + carte_sport$Licences_Golf
sport_names <- c("Licences_Football", "Licences_Tennis", "Licences_Basketball", "Licences_Handball", "Licences_Natation", "Licences_Rugby", "Licences_Golf")
sport_counts <- sapply(sport_names, function(sport) sum(carte_sport[[sport]]))
plot_ly(labels = sport_names, values = sport_counts, type = 'pie', textinfo = 'label+percent', title = "Répartition des infrastructures sportives par sport")
# Création du graphique en secteurs (camembert) interactif
total_infra <- carte_sport$Football + carte_sport$Tennis + carte_sport$Basket + carte_sport$Handball + carte_sport$Natation + carte_sport$Rugby + carte_sport$Golf
sport_names <- c("Football", "Tennis", "Basket", "Handball", "Natation", "Rugby", "Golf")
sport_counts <- sapply(sport_names, function(sport) sum(carte_sport[[sport]]))
plot_ly(labels = sport_names, values = sport_counts, type = 'pie', textinfo = 'label+percent', title = "Répartition des infrastructures sportives par sport")
# Création du graphique en secteurs (camembert) interactif
total_infra <- carte_sport$Licences_Football + carte_sport$Licences_Tennis + carte_sport$Licences_Basketball + carte_sport$Licences_Handball + carte_sport$Licences_Natation + carte_sport$Licences_Rugby + carte_sport$Licences_Golf
sport_names <- c("Licences_Football", "Licences_Tennis", "Licences_Basketball", "Licences_Handball", "Licences_Natation", "Licences_Rugby", "Licences_Golf")
sport_counts <- sapply(sport_names, function(sport) sum(carte_sport[[sport]]))
plot_ly(labels = sport_names, values = sport_counts, type = 'pie', textinfo = 'label+percent', title = "Répartition des infrastructures sportives par sport")
# Création du graphique en secteurs (camembert) interactif
total_infra <- carte_sport$Football + carte_sport$Tennis + carte_sport$Basket + carte_sport$Handball + carte_sport$Natation + carte_sport$Rugby + carte_sport$Golf
sport_names <- c("Football", "Tennis", "Basket", "Handball", "Natation", "Rugby", "Golf")
sport_counts <- sapply(sport_names, function(sport) sum(carte_sport[[sport]]))
plot_ly(labels = sport_names, values = sport_counts, type = 'pie', textinfo = 'label+percent', title = "Répartition des infrastructures sportives par sport")
# 17. Graphique en 3D interactif
plot_ly(data = carte_sport,
x = ~Football,
y = ~Tennis,
z = ~Basket,
text = ~paste("Département : ", code_insee)) %>%
add_markers() %>%
layout(title = "Répartition des infrastructures sportives par département en 3D",
scene = list(xaxis = list(title = "Football"),
yaxis = list(title = "Tennis"),
zaxis = list(title = "Basket")))
# Normalisation des données par sport
carte_sport_long <- carte_sport_long %>%
group_by(Sport) %>%
mutate(Nombre_infrastructures_normalized = Nombre_infrastructures / max(Nombre_infrastructures))
# Création de la carte de chaleur interactive avec une palette de couleurs personnalisée et données normalisées
plot_ly(data = carte_sport_long,
y = ~Sport,
x = ~code_insee,
z = ~Nombre_infrastructures_normalized,  # Utilisation des données normalisées
type = "heatmap",
colorscale = list(c(0, 1), c("#FFF4C2", "#BB0F0F")),
text = ~paste("Département : ", code_insee, "<br>",
"Sport : ", Sport, "<br>",
"Nombre d'infrastructures : ", Nombre_infrastructures),
hoverinfo = "text",
colorbar = list(title = "Nombre d'infrastructures")) %>%
layout(title = "Carte de chaleur des infrastructures sportives par département et par sport (Données normalisées)",
yaxis = list(title = "Sport"),
xaxis = list(title = "Code INSEE du département"))
# Conversion des données au format long pour le traitement avec plotly
carte_sport_long <- tidyr::pivot_longer(carte_sport, cols = -code_insee, names_to = "Sport", values_to = "Nombre_infrastructures")
# Normalisation des données par sport
carte_sport_long <- carte_sport_long %>%
group_by(Sport) %>%
mutate(Nombre_infrastructures_normalized = Nombre_infrastructures / max(Nombre_infrastructures))
# Création de la carte de chaleur interactive avec une palette de couleurs personnalisée et données normalisées
plot_ly(data = carte_sport_long,
y = ~Sport,
x = ~code_insee,
z = ~Nombre_infrastructures_normalized,  # Utilisation des données normalisées
type = "heatmap",
colorscale = list(c(0, 1), c("#FFF4C2", "#BB0F0F")),
text = ~paste("Département : ", code_insee, "<br>",
"Sport : ", Sport, "<br>",
"Nombre d'infrastructures : ", Nombre_infrastructures),
hoverinfo = "text",
colorbar = list(title = "Nombre d'infrastructures")) %>%
layout(title = "Carte de chaleur des infrastructures sportives par département et par sport (Données normalisées)",
yaxis = list(title = "Sport"),
xaxis = list(title = "Code INSEE du département"))
# Création du graphique en secteurs (camembert) interactif
total_infra <- carte_sport$Football + carte_sport$Tennis + carte_sport$Basket + carte_sport$Handball + carte_sport$Natation + carte_sport$Rugby + carte_sport$Golf
sport_names <- c("Football", "Tennis", "Basket", "Handball", "Natation", "Rugby", "Golf")
sport_counts <- sapply(sport_names, function(sport) sum(carte_sport[[sport]]))
plot_ly(labels = sport_names, values = sport_counts, type = 'pie', textinfo = 'label+percent', title = "Répartition des infrastructures sportives par sport")
file.exists("/Users/titouanlegourrierec/Desktop/output.png")
View(carte_sport)
sport_equipment <- read_csv("/Users/titouanlegourrierec/Desktop/Sport_Equipment.csv")
# Chargement des bibliothèques
library(flexdashboard)
library(shiny)
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
library(reshape2)
library(rAmCharts)
library(rpart)
library(sf)
library(readr)
library(stringr)
library(leaflet)
library(RColorBrewer)
library(DT)
sport_equipment <- read_csv("/Users/titouanlegourrierec/Desktop/Sport_Equipment.csv")
sport_equipment <- sport_equipment[, !names(sport_equipment) %in% c("...1")]
#sport_equipment <- sport_equipment %>% rename(code_insee = dept)
View(sport_equipment)
View(sport_equipment)
sport_equipment <- read_csv("/Users/titouanlegourrierec/Desktop/Sport_Equipment.csv")
sport_equipment <- sport_equipment[, !names(sport_equipment) %in% c("...1")]
#sport_equipment <- sport_equipment %>% rename(code_insee = dept)
View(sport_equipment)
carte_sport <- inner_join(carte_filtree, sport_equipment, by = "code_insee")
View(carte_sport)
carte_sport <- inner_join(carte_sport, licences, by = "code_insee")
View(carte_sport)
View(carte_sport)
carte_sport
carte_sport
departement <- subset(carte_sport, code_insee == "01")
departement
sport_H <- grep("^Football.*H$", names(departement), value = TRUE)
sport_F <- grep("^Football.*F$", names(departement), value = TRUE)
valeurs <- c(sum(departement[, sport_H]), sum(departement[, sport_F]))
View(departement)
departement[, sport_H]
sum(departement[, sport_H])
xtest <- st_drop_geometry(departement[, sport_H])
View(xtest)
sum(xtest)
# Chargement des bibliothèques
library(flexdashboard)
library(shiny)
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
library(reshape2)
library(rAmCharts)
library(rpart)
library(sf)
library(readr)
library(stringr)
library(leaflet)
library(RColorBrewer)
library(DT)
# Read the shapefile data for French departments
france <- st_read("./departements-20140306-100m.shp", quiet=T)
# Remove unnecessary columns from the 'france' dataframe
france <- france[, !names(france) %in% c("nom", "nuts3", "wikipedia")]
# Read the population data for French departments
pop <- read_csv("./Departements.csv")
# Remove the first column from the 'pop' dataframe
pop <- pop[, -1]
# Perform an inner join between 'france' and 'pop' dataframes based on the 'code_insee' column
carte_filtree <- inner_join(france, pop, by = "code_insee")
# Calculate the areas of the departments and convert them to square kilometers
carte_filtree <- carte_filtree %>% mutate(aires = st_area(.))
carte_filtree <- carte_filtree %>% mutate(aires = as.numeric(str_extract(aires, "\\d+")) / 1E6)
carte_filtree["Densité"] <- carte_filtree["pop"]/carte_filtree["aires"]
sport_equipment <- read_csv("/Users/titouanlegourrierec/Desktop/Sport_Equipment.csv")
sport_equipment <- sport_equipment[, !names(sport_equipment) %in% c("...1")]
#sport_equipment <- sport_equipment %>% rename(code_insee = dept)
licences <-  read_csv("./AllPages.csv")
licences <- licences[, -1]
carte_sport <- inner_join(carte_filtree, sport_equipment, by = "code_insee")
carte_sport <- inner_join(carte_sport, licences, by = "code_insee")
carte_sport$code_nom <- paste(carte_sport$code_insee, carte_sport$nom, sep = " - ")
colnames(carte_sport)[colnames(carte_sport) == "Basket"] <- "Basketball"
evolution <- read_csv2("./Licences_evolution.csv")
```{r setup, include=FALSE}
library(flexdashboard)
library(shiny)
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
library(reshape2)
library(rAmCharts)
library(rpart)
library(sf)
library(readr)
library(stringr)
library(leaflet)
library(RColorBrewer)
library(DT)
carte_sport <- inner_join(carte_filtree, sport_equipment, by = "code_insee")
packages.install
install.packages(shinyBS)
install.packages('shinyBS')
En 2022, en France, les 10 sports les plus pratiqués sont, dans l'ordre : Football, Tennis, Equitation, Basketball, Judo, Handball, Golf, Natation, Canoë Kayak, Rugby.
View(evolution)
departement <- subset(carte_sport, code_nom == input$dep)
renderPlotly({
departement <- subset(carte_sport, code_nom == input$dep)
Licenciés_Hommes <- grep(paste0("^",input$sport2, ".*H$"), names(departement), value = TRUE)
Licenciées_Femmes <- grep(paste0("^",input$sport2, ".*F$"), names(departement), value = TRUE)
Licenciés_Hommes <- st_drop_geometry(departement[, Licenciés_Hommes])
Licenciées_Femmes <- st_drop_geometry(departement[, Licenciées_Femmes])
# Créer un vecteur contenant les valeurs des colonnes "sport_H" et "sport_F"
valeurs <- c(sum(Licenciés_Hommes), sum(Licenciées_Femmes))
# Noms des sections
noms_sections <- c("Licenciés Hommes", "Licenciées Femmes")
# Couleurs personnalisées
couleurs <- c("#3685B5", "#F03A47") # Bleu pour les hommes, orange pour les femmes
plot_ly(labels = noms_sections, values = valeurs, type = 'pie', textinfo = 'value+percent', hole = 0.5) %>%
add_trace(marker = list(colors = couleurs))
})
View(carte_sport)
x <- paste0('Infrastructures_',input$sport5)
x <- paste0('Infrastructures_','Football')
object <- carte_sport[[x]]
x <- paste0('Infrastructures_','Football')
object <- sum(carte_sport[[x]])
colonnes_selectionnees <- names(carte_sport)[grep("Football", names(carte_sport)) & (grep("H", names(carte_sport)) | grep("F", names(carte_sport)))]
colonnes_selectionnees <- names(carte_sport)[grep("Football", names(carte_sport)) & (grep("H", names(carte_sport)) | grep("F", names(carte_sport)))]
colonnes_selectionnees <- names(carte_sport)[grep("Football", names(carte_sport)) & (grep("H", names(carte_sport)) | grep("F", names(carte_sport)))]
# Filtrer les colonnes qui commencent par "Football" et se terminent par "H" ou "F"
filtered_columns <- grep("^Football.*[HF]$", names(df), value = TRUE)
Licenciés_Hommes <- grep(paste0("^","Football", ".*H$"), names(departement), value = TRUE)
Licenciés_Hommes <- grep(paste0("^","Football", ".*H$"), names(carte_sport), value = TRUE)
install.packages("shinyBS")
<div style="display: flex; align-items: center;">
rsconnect::setAccountInfo(name='titouanlegourrierec', token='7319AF2A3409D2CA5422D00C6C109B28', secret='ZiP5VjMrdnrD2SKFIi8GcXRXG/Zl9XlwwbjnNKgD')
setwd("/Users/titouanlegourrierec/Desktop/Shiny_Projet_Visu")
rsconnect::deployApp()
rsconnect::setAccountInfo(name='titouanlegourrierec', token='7319AF2A3409D2CA5422D00C6C109B28', secret='ZiP5VjMrdnrD2SKFIi8GcXRXG/Zl9XlwwbjnNKgD')
setwd("/Users/titouanlegourrierec/Desktop/Shiny_Projet_Visu")
rsconnect::deployApp()
rsconnect::setAccountInfo(name='titouanlegourrierec', token='7319AF2A3409D2CA5422D00C6C109B28', secret='ZiP5VjMrdnrD2SKFIi8GcXRXG/Zl9XlwwbjnNKgD')
setwd("/Users/titouanlegourrierec/Desktop/Shiny_Projet_Visu")
rsconnect::deployApp()
